#!/bin/bash
set -eEuC
set -o pipefail

_DEBUG="${_DEBUG:=}"
if [[ "${_DEBUG}" -eq 1 ]]; then
  gsutil() {
    echo "DEBUG: would have run 'gsutil ${*}'"
  }

  git() {
    echo "DEBUG: would have run 'git ${*}'"
  }
fi

BUCKET_URL="https://storage.googleapis.com"
BUCKET_PATH="csm-artifacts/asm"; readonly BUCKET_PATH

CURRENT_RELEASE="release-1.8-asm"; readonly CURRENT_RELEASE
prod_releases() {
  cat << EOF
release 1.9
release 1.8
release 1.7
release 1.6
EOF
}

staging_releases() {
  cat << EOF
staging 1.9
staging 1.8
EOF
}

other_releases() {
  cat << EOF
master unstable
EOF
}

# all_releases should write two strings to stdout: <branch-name> <file-suffix>
# <file_suffix> is the string that comes after the script name in the GCS bucket
# e.g. the pair "branch" "demo" will check out the git branch "branch" and
# upload a file called "<SCRIPT_NAME>_demo" to the GCS bucket.
all_releases() {
  while read -r type version; do
    echo "${type}-${version}-asm" "${version}"
  done <<EOF
$(prod_releases)
EOF
  while read -r type version; do
    echo "${type}-${version}-asm" "staging_${version}"
  done <<EOF
$(staging_releases)
EOF
  while read -r type version; do
    echo "${type}" "${version}"
  done <<EOF
$(other_releases)
EOF
}

main() {
  setup

  while read -r branch version; do
    publish_script "${branch}" "${version}" install_asm
    publish_script "${branch}" "${version}" asm_vm
  done <<EOF
$(all_releases)
EOF
}

publish_script() {
  local BRANCH_NAME; BRANCH_NAME="${1}"
  local VERSION; VERSION="${2}"
  local SCRIPT_NAME; SCRIPT_NAME="${3}"
  local FILE_NAME; FILE_NAME="${SCRIPT_NAME}_${VERSION}"
  local FILE_PATH; FILE_PATH="${BUCKET_PATH}/${FILE_NAME}"
  local FILE_URI; FILE_URI="${BUCKET_URL}/${FILE_PATH}"

  git checkout "${BRANCH_NAME}"

  if [[ ! -f "${SCRIPT_NAME}" ]]; then return; fi

  if curl -O "${FILE_URI}.sha256"; then
    if sha256sum -c --ignore-missing "${FILE_NAME}.sha256" >/dev/null 2>/dev/null; then
      echo "No changes in ${FILE_NAME}, skipping"
      rm "${FILE_NAME}.sha256"
      return
    fi
    rm "${FILE_NAME}.sha256"
  else
      echo "New file {FILE_NAME}"
  fi

  sha256sum "${SCRIPT_NAME}" >| "${SCRIPT_NAME}.sha256"
  mv "${SCRIPT_NAME}" "${FILE_NAME}"
  sha256sum "${FILE_NAME}" >> "${SCRIPT_NAME}.sha256"
  gsutil cp "${FILE_NAME}" gs://"${FILE_PATH}"
  gsutil cp "${SCRIPT_NAME}.sha256" gs://"${FILE_PATH}.sha256"
  gsutil acl ch -u AllUsers:R gs://"${FILE_PATH}" gs://"${FILE_PATH}.sha256"

  curl -O "${FILE_URI}"
  curl -O "${FILE_URI}.sha256"

  sha256sum -c --ignore-missing "${FILE_NAME}.sha256" || echo "Failed to verify ${FILE_NAME}!" >&2

  if [[ "${BRANCH_NAME}" == "${CURRENT_RELEASE}" ]]; then
    gsutil cp "${FILE_NAME}" gs://"${BUCKET_PATH}/${SCRIPT_NAME}"
    gsutil cp "${SCRIPT_NAME}.sha256" gs://"${BUCKET_PATH}/${SCRIPT_NAME}.sha256"
    gsutil acl ch -u AllUsers:R gs://"${BUCKET_PATH}/${SCRIPT_NAME}" gs://"${BUCKET_PATH}/${SCRIPT_NAME}.sha256"

    curl -O "${BUCKET_URL}/${BUCKET_PATH}/${SCRIPT_NAME}"
    curl -O "${BUCKET_URL}/${BUCKET_PATH}/${SCRIPT_NAME}.sha256"

    sha256sum -c --ignore-missing "${SCRIPT_NAME}.sha256" || echo "Failed to verify ${SCRIPT_NAME}!" >&2
  fi

  git restore "${SCRIPT_NAME}"
  echo "Published ${FILE_NAME} successfully."
}

setup() {
  tmpdir="$(mktemp -d)"
  pushd "${tmpdir}"
  git clone git@github.com:GoogleCloudPlatform/anthos-service-mesh-packages.git
  if [[ "${_DEBUG}" -ne 1 ]]; then
    cd anthos-service-mesh-packages/scripts/asm-installer
  else
    touch install_asm
  fi
}

main
