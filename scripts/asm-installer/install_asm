#!/bin/bash
set -CeE
set -o pipefail
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  cat << EOF >&2
WARNING: bash ${BASH_VERSION} does not support several modern safety features.
This script was written with the latest POSIX standard in mind, and was only
tested with modern shell standards. This script may not perform correctly in
this environment.
EOF
  sleep 1
else
  set -u
fi

### Internal variables ###
MAJOR="1"; MINOR="6"; POINT="8"; REV="9";
RELEASE="${MAJOR}.${MINOR}.${POINT}-asm.${REV}"
RELEASE_LINE="${MAJOR}.${MINOR}."
REVISION_LABEL="asm-${MAJOR}${MINOR}${POINT}-${REV}"
unset MAJOR; unset MINOR; unset POINT; unset REV;
readonly RELEASE
readonly RELEASE_LINE
readonly REVISION_LABEL

SCRIPT_NAME="${0##*/}"

WORKSPACE_DIR=""
PROJECT_NUMBER=""
KPT_URL=""
KPT_GH_URL=""
KUBECONFIG=""

### Option variables ###
PROJECT_ID="${PROJECT_ID:=}"
CLUSTER_NAME="${CLUSTER_NAME:=}"
CLUSTER_LOCATION="${CLUSTER_LOCATION:=}"
MODE="${MODE:=}"
CA="${CA:=}"

OPERATOR_OVERLAY="${OPERATOR_OVERLAY:=}"
ENABLE_APIS="${ENABLE_APIS:=0}"
SERVICE_ACCOUNT="${SERVICE_ACCOUNT:=}"
KEY_FILE="${KEY_FILE:=}"

DRY_RUN="${DRY_RUN:=0}"
ONLY_VALIDATE="${ONLY_VALIDATE:=0}"
VERBOSE="${VERBOSE:=0}"

main() {
  parse_args "${@}"
  validate_args
  set_up_local_workspace

  if [[ -n "${SERVICE_ACCOUNT}" ]]; then
    auth_service_account
  fi

  validate_dependencies

  info "Successfully validated all requirements to install ASM from this computer."
  if [[ "${ONLY_VALIDATE}" -ne 0 ]]; then
    success
    return 0
  fi

  set_up_project
  set_up_cluster
  install_asm

  info "Successfully installed ASM."
  success
  return 0
}

### Convenience functions ###

#######
# run takes a list of arguments that represents a command
# If DRY_RUN or VERBOSE is enabled, it will print the command, and if DRY_RUN is
# not enabled it runs the command.
#######
run() {
  if [[ "${DRY_RUN}" -ne 0 ]]; then
    warn "Would have executed: ${*}"
    return
  elif [[ "${VERBOSE}" -eq 0 ]]; then
    "${@}"
    return "$?"
  fi
  warn "Running: '${*}'"
  warn "-------------"
  local RETVAL;
  { "${@}"; RETVAL="$?"; } || true
  warn "-------------"
  warn "Ran: '${*}'"
  return $RETVAL
}

#######
# retry takes an integer N as the first argument, and a list of arguments
# representing a command afterwards. It will retry the given command up to N
# times before returning 1. If the command is gcloud or kubectl, it will try to
# re-get credentials in case something caused the k8s IP to change.
#######
retry() {
  local MAX_TRIES; MAX_TRIES="${1}";
  shift 1
  for i in $(seq 0 "${MAX_TRIES}"); do
    if [[ "${i}" -eq "${MAX_TRIES}" ]]; then
      return 1
    fi
    { "${@}" && return 0; } || true
    warn "Failed, retrying...($((i+1)) of ${MAX_TRIES})"
    sleep 2
    if [[ "$1" == "gcloud" || "$1" == "kubectl" ]]; then
      configure_kubectl
    fi
  done
  return 1
}

configure_kubectl(){
  info "Fetching/writing GCP credentials to kubeconfig file..."
  retry 2 run gcloud container clusters get-credentials "${CLUSTER_NAME}" \
    --project="${PROJECT_ID}" \
    --zone="${CLUSTER_LOCATION}"
}

warn() {
  info "${1}" >&2
}

info() {
  echo "${SCRIPT_NAME}: ${1}"
}

fatal() {
  warn "ERROR: ${1}"
  exit 2
}

fatal_with_usage() {
  warn "${1}"
  usage >&2
  exit 2
}

success() {
  cleanup_local_workspace
  return 0
}

### CLI/initial setup functions ###
usage() {
  cat << EOF
usage: ${SCRIPT_NAME} [OPTION]...

Set up, validate, and install ASM in a Google Cloud environment.
All options can also be passed via environment variables by using the ALL_CAPS
name. Options specified via flags take precedence over environment variables.

OPTIONS:
  -l|--cluster_location  <LOCATION>   The GCP location of the target cluster
  -n|--cluster_name      <NAME>       The name of the target cluster
  -p|--project_id        <ID>         The GCP project ID
  -m|--mode              <MODE>       The type of installation to perform.
                                      Allowed values for <MODE> are
                                      {install|migrate}. Choose --mode=install
                                      for a new ASM installation or
                                      --mode=migrate for an existing OSS
                                      installation to be migrated to ASM.
                                      MODE=install defaults to using Mesh CA
                                      as the certificate authority.
  -c|--ca                <CA>         The type of certificate authority to be
                                      used. Allowed values for <CA> are
                                      {citadel|mesh_ca}.

  -e|--enable_apis                    (optional) Allow this script to enable
                                      necessary APIs on your behalf. Without
                                      this flag, it will abort if APIs are not
                                      already enabled.
  -o|--operator_overlay  <FILE PATH>  (optional) The location of a YAML file to
                                      overlay over the ASM IstioOperator.
  -s|--service_account   <ACCOUNT>    (optional) The name of a service account
                                      used to install ASM
  -k|--key_file          <FILE PATH>  (optional) The key file for a service
                                      account. Required if --service_account is
                                      passed.

  -v|--verbose                        Print commands before and after execution.
     --dry_run                        Print commands, don't execute them.
     --only_validate                  Run validation but don't install
  -h|--help                           Show this message and exit.

EXAMPLE:
The following invocation will install ASM to a cluster named "my_cluster" in
project "my_project" in region "us-central1-c" using "mesh_ca" as certificate
authority:
  $> ${SCRIPT_NAME} \\
      -n my_cluster \\
      -p my_project \\
      -l us-central1-c \\
      -m install \\
      -c mesh_ca
EOF
}

arg_required() {
  if [[ ! "${2:-}" || "${2:0:1}" = '-' ]]; then
    fatal "Option ${1} requires an argument."
  fi
}

parse_args() {
  # shellcheck disable=SC2064
  trap "$(shopt -p nocasematch)" RETURN
  shopt -s nocasematch

  while [[ $# != 0 ]]; do
    case "${1}" in
      -l | --cluster_location | --cluster-location)
        arg_required "${@}"
        CLUSTER_LOCATION="${2}"
        shift 2
        ;;
      -n | --cluster_name | --cluster-name)
        arg_required "${@}"
        CLUSTER_NAME="${2}"
        shift 2
        ;;
      -p | --project_id | --project-id)
        arg_required "${@}"
        PROJECT_ID="${2}"
        shift 2
        ;;
      -m | --mode)
        arg_required "${@}"
        MODE="$(echo "${2}" | tr '[:upper:]' '[:lower:]')"
        shift 2
        ;;
      -c | --ca)
        arg_required "${@}"
        CA="$(echo "${2}" | tr '[:upper:]' '[:lower:]')"
        shift 2
        ;;
      -o | --operator_overlay | --operator-overlay)
        arg_required "${@}"
        OPERATOR_OVERLAY="${2}"
        shift 2
        ;;
      -e | --enable_apis | --enable-apis)
        ENABLE_APIS=1
        shift 1
        ;;
      -s | --service_account | --service-account)
        arg_required "${@}"
        SERVICE_ACCOUNT="${2}"
        shift 2
        ;;
      -k | --key_file | --key-file)
        arg_required "${@}"
        KEY_FILE="${2}"
        shift 2
        ;;
      --dry_run | --dry-run)
        DRY_RUN=1
        shift 1
        ;;
      --only_validate | --only-validate)
        ONLY_VALIDATE=1
        shift 1
        ;;
      -v)
        VERBOSE=1
        shift 1
        ;;
      -h | --help)
        usage
        exit
        ;;
      *)
        fatal_with_usage "Unknown option ${1}"
        ;;
    esac
  done
}

validate_args() {
  if [[ "${MODE}" == "install" && -z "${CA}" ]]; then
    CA="mesh_ca"
  fi

  # shellcheck disable=SC2064
  case "${MODE}" in
    install | migrate);;
    *) fatal "MODE must be one of 'install', 'migrate'";;
  esac

  case "${CA}" in
    citadel | mesh_ca);;
    *) fatal "CA must be one of 'citadel', 'mesh_ca'";;
  esac

  local MISSING_ARGS=0
  while read -r REQUIRED_ARG; do
    if [[ -z "${!REQUIRED_ARG}" ]]; then
      MISSING_ARGS=1
      warn "Missing value for ${REQUIRED_ARG}"
    fi
    readonly "${REQUIRED_ARG}"
  done <<EOF
CLUSTER_LOCATION
CLUSTER_NAME
PROJECT_ID
MODE
CA
EOF

  if [[ "${MISSING_ARGS}" -ne 0 ]]; then
    fatal_with_usage "Missing one or more required options."
  fi

  while read -r FLAG; do
    if [[ "${!FLAG}" -ne 0 && "${!FLAG}" -ne 1 ]]; then
      fatal "${FLAG} must be 0 (off) or 1 (on) if set via environment variables."
    fi
    readonly "${FLAG}"
  done <<EOF
DRY_RUN
ENABLE_APIS
ONLY_VALIDATE
VERBOSE
EOF

  if [[ -n "$SERVICE_ACCOUNT" && -z "$KEY_FILE" || -z "$SERVICE_ACCOUNT" && -n "$KEY_FILE" ]]; then
    fatal "Service account and key file must be used together."
  fi

  # since we cd to a tmp directory, we need the absolute path for the key file
  # and yaml file
  if [[ -f "${KEY_FILE}" ]]; then
    KEY_FILE="$(readlink -f "$KEY_FILE")"
    readonly KEY_FILE
  elif [[ -n "${KEY_FILE}" ]]; then
    fatal "Couldn't find key file ${KEY_FILE}."
  fi

  if [[ -f "${OPERATOR_OVERLAY}" ]]; then
    OPERATOR_OVERLAY="$(readlink -f "$OPERATOR_OVERLAY")"
    readonly OPERATOR_OVERLAY
  elif [[ -f "${OPERATOR_OVERLAY}" ]]; then
    fatal "Couldn't find yaml file ${OPERATOR_OVERLAY}."
  fi

  set_kpt_package_url
  WORKLOAD_POOL="${PROJECT_ID}.svc.id.goog"
}

set_kpt_package_url() {
  local CA_OPT
  CA_OPT=""
  if [[ "${CA}" = "citadel" ]]; then
    CA_OPT="-citadel"
  fi
  local URL_PREFIX
  URL_PREFIX="https://github.com/GoogleCloudPlatform/anthos-service-mesh-packages"
  KPT_GH_URL="${URL_PREFIX}/tree/release-1.6-asm/asm${CA_OPT}"
  KPT_URL="${URL_PREFIX}.git/asm${CA_OPT}@release-1.6-asm"
  readonly KPT_URL; readonly KPT_GH_URL;
}

auth_service_account() {
  info "Authorizing ${SERVICE_ACCOUNT} with ${KEY_FILE}..."
  run gcloud auth activate-service-account \
    --project="${PROJECT_ID}" \
    "${SERVICE_ACCOUNT}" \
    --key-file="${KEY_FILE}"
}

#######
# set_up_local_workspace does everything that the script needs to avoid
# polluting the environment or current working directory
#######
set_up_local_workspace() {
  info "Setting up a temporary workspace..."
  WORKSPACE_DIR="$(mktemp -d)"
  if [[ -z "${WORKSPACE_DIR}" ]]; then
    fatal "Encountered error when running mktemp -d!"
  fi
  pushd "$WORKSPACE_DIR" > /dev/null

  info "Generating a new kubeconfig..."
  KUBECONFIG="$(mktemp)"
  if [[ -z "${KUBECONFIG}" ]]; then
    fatal "Encountered error when running mktemp!"
  fi
  export KUBECONFIG
}

cleanup_local_workspace() {
  run rm "${KUBECONFIG}"
  run popd
  run rm -r "${WORKSPACE_DIR}"
}

### Environment validation functions ###
validate_dependencies() {
  validate_cli_dependencies
  validate_gcp_resources
  # configure kubectl does have side effects but we've generated a temprorary
  # kubeconfig so we're not breaking the promise that --only_validate gives
  configure_kubectl
  validate_packages_fetchable
  validate_expected_control_plane
  if [[ "${MODE}" = "migrate" ]]; then
    validate_istio_version
  fi
  if [[ "${ENABLE_APIS}" -eq 0 || "${ONLY_VALIDATE}" -eq 1 ]]; then
    exit_if_apis_not_enabled
  fi
}

validate_cli_dependencies() {
  local NOTFOUND; NOTFOUND="";
  local EXITCODE; EXITCODE=0;

  info "Checking installation tool dependencies..."
  while read -r dependency; do
    EXITCODE=0
    hash "${dependency}" 2>/dev/null || EXITCODE=$?
    if [[ "${EXITCODE}" -ne 0 ]]; then
      NOTFOUND="${dependency},${NOTFOUND}"
    fi
  done <<EOF
awk
gcloud
grep
jq
kpt
kubectl
sed
tr
EOF

  if [[ -n "${NOTFOUND}" ]]; then
    NOTFOUND="${NOTFOUND::-1}"
    for dep in $(echo "${NOTFOUND}" | tr ' ' '\n'); do
      warn "Dependency not found: ${dep}"
    done
    fatal "One or more dependencies were not found. Please install them and retry."
  fi

  local OS
  # shellcheck disable=SC2064
  trap "$(shopt -p nocasematch)" RETURN
  shopt -s nocasematch
  if [[ "$(uname -m)" != "x86_64" ]]; then
    fatal "Installation is only supported on x86_64."
  fi
  case "$(uname)" in
    Linux ) OS="linux-amd64";;
    Darwin) OS="osx";;
    *     ) fatal "$(uname) is not a supported OS.";;
  esac

  info "Downloading ASM.."
  curl -L "https://storage.googleapis.com/gke-release/asm/istio-${RELEASE}-${OS}.tar.gz" \
    | tar xz
}

validate_packages_fetchable () {
  if ! curl -LI "${KPT_GH_URL}" -o /dev/null --fail 2>/dev/null; then
    fatal "Couldn't connect to KPT package location, please verify connectivity to GitHub."
  fi
}

validate_gcp_resources() {
  validate_project
  PROJECT_NUMBER="$(gcloud projects describe "${PROJECT_ID}" --format="value(projectNumber)")"
  validate_cluster
  validate_node_pool
}

validate_project() {
  local RESULT; RESULT=""

  info "Checking for ${PROJECT_ID}..."
  RESULT=$(gcloud projects list \
    --filter="project_id=${PROJECT_ID}" \
    --format="value(project_id)" || true)

  if [[ -z "${RESULT}" ]]; then
    { read -r -d '' MSG; fatal "${MSG}"; } <<EOF
Unable to find project ${PROJECT_ID}. Please verify the spelling and try
again. To see a list of your projects, run:
  gcloud projects list --format='value(project_id)'
EOF
  fi

}

validate_cluster() {
  local RESULT; RESULT=""

  info "Confirming cluster information..."
  RESULT="$(gcloud container clusters list \
    --project="${PROJECT_ID}" \
    --filter="name = ${CLUSTER_NAME} and location = ${CLUSTER_LOCATION}" \
    --format="value(name)" || true)"
  if [[ -z "${RESULT}" ]]; then
    { read -r -d '' MSG; fatal "${MSG}"; } <<EOF
Unable to find cluster ${CLUSTER_LOCATION}/${CLUSTER_NAME}.
Please verify the spelling and try again. To see a list of your clusters, in
this project, run:
  gcloud container clusters list --format='value(name,zone)' --project="${PROJECT_ID}"
EOF
  fi
}

list_valid_pools() {
  gcloud container node-pools list \
    --project="${PROJECT_ID}" \
    --region "${CLUSTER_LOCATION}" \
    --cluster "${CLUSTER_NAME}" \
    --filter "$(valid_pool_query "${1}" "${2}")"\
    --format=list
}

#######
# valid_pool_query takes two integer arguments. $1 is the minimum node
# requirement for a cluster, and $2 is the minimum vCPU requirement. It outputs
# to stdout a query for `gcloud container node-pools list`
#######
valid_pool_query() {
  cat <<EOF | tr '\n' ' '
(initialNodeCount >= $1
  OR (autoscaling.enabled = True AND autoscaling.maxNodeCount >= $1))
AND config.machineType.split(sep="-").slice(-1:) >= $2
EOF
}

#######
# validate_node_pool makes sure that the cluster meets ASM's minimum compute
# requirements
#######
validate_node_pool() {
  local NODE_REQ; NODE_REQ=4; readonly NODE_REQ;
  local CPU_REQ; CPU_REQ=4; readonly CPU_REQ;

  info "Confirming node pool requirements..."
  if [[ -z "$(list_valid_pools "${NODE_REQ}" "${CPU_REQ}")" ]]; then
    { read -r -d '' MSG; fatal "${MSG}"; } <<EOF
ASM requires at least one node pool in a cluster to be at least 4 nodes,
and use machine types with at least 4 vCPUs.
${CLUSTER_LOCATION}/${CLUSTER_NAME}
does not have any node pools that meet these requirements. Please retry with a
cluster that meets resource requirements.
EOF
  fi
}

validate_expected_control_plane(){
  info "Checking Istio installations..."
  check_no_istiod_outside_of_istio_system_namespace
  if [[ "${MODE}" = "migrate" ]]; then
    check_istio_deployed
  fi
  if [[ "${MODE}" = "install" ]]; then
    check_istio_not_deployed
  fi
}

check_no_istiod_outside_of_istio_system_namespace() {
  local IN_ANY_NAMESPACE; IN_ANY_NAMESPACE="$(kubectl get deployment -A --ignore-not-found=true | grep -c istiod || true)";
  local IN_NAMESPACE; IN_NAMESPACE="$(kubectl get deployment -n istio-system --ignore-not-found=true | grep -c istiod || true)";
  if [ "$IN_ANY_NAMESPACE" -gt "$IN_NAMESPACE" ]; then
    { read -r -d '' MSG; fatal "${MSG}"; } <<EOF
found istiod deployment outside of istio-system namespace. This installer
does not support that configuration.
EOF
  fi
}

get_istio_deployment_count(){
  local OUTPUT
  OUTPUT="$(retry 3 kubectl get deployment \
    -n istio-system \
    --ignore-not-found=true)"
  grep -c istiod <<EOF || true
$OUTPUT
EOF
}

check_istio_deployed(){
  local ISTIOD_COUNT; ISTIOD_COUNT="$(get_istio_deployment_count)";
  info "Found ${ISTIOD_COUNT} deployment(s)."
  if [[ "$ISTIOD_COUNT" -eq 0 ]]; then
    fatal "Migrate mode specified but no istiod deployment found. (Expected >=1.)"
  fi
}

check_istio_not_deployed(){
  local ISTIOD_COUNT; ISTIOD_COUNT="$(get_istio_deployment_count)";
  if [[ "$ISTIOD_COUNT" -ne 0 ]]; then
    fatal "Install mode specified, but ${ISTIOD_COUNT} existing istiod deployment(s) found. (Expected 0.)"
  fi
}

validate_istio_version() {
  info "Checking existing Istio version(s)..."
  local OUTPUT
  OUTPUT="$(retry 3 ./istio-${RELEASE}/bin/istioctl version -o json)"
  local FOUND_VALID_VERSION
  FOUND_VALID_VERSION="false"
  for version in $(echo "${OUTPUT}" | jq -r '.meshVersion[].Info.version' -r); do
    if [[ "$version" =~ ^$RELEASE_LINE ]]; then
      info "  $version (suitable for migration)"
      FOUND_VALID_VERSION="true"
    fi
    if ! [[ "$version" =~ ^$RELEASE_LINE ]]; then
      info "  $version (not suitable for migration)"
    fi
    if [[ "$version" =~ "asm" ]]; then
      fatal "Cannot migrate from version $version. Only migration from OSS Istio to the ASM distribution is supported."
    fi
  done
  if [[ "$FOUND_VALID_VERSION" != "true" ]]; then
    fatal "Migration requires an existing control plane in the ${RELEASE_LINE} line."
  fi
}

### Project functions ###
set_up_project(){
  bind_user_to_iam_policy

  # This if statement should always trigger, but just in case we should be
  # careful about enabling things without explicit permission
  if [[ "$ENABLE_APIS" == 1 ]]; then
    enable_gcloud_apis
  fi

  if [[ "${CA}" = "mesh_ca" ]]; then
    init_meshca
  fi
}

bind_user_to_iam_policy(){
  local ACCOUNT_TYPE
  ACCOUNT_TYPE="user"
  if [[ -n "${SERVICE_ACCOUNT}" ]]; then
    ACCOUNT_TYPE="serviceAccount"
  fi
  info "Getting account information..."
  local GCLOUD_MEMBER;
  GCLOUD_MEMBER="$(retry 3 gcloud auth list \
    --project="${PROJECT_ID}" \
    --filter="status:ACTIVE" \
    --format="value(account)")"

  info "Binding ${GCLOUD_MEMBER} to required IAM roles..."
  retry 3 run gcloud projects add-iam-policy-binding "${PROJECT_ID}" \
    --member "${ACCOUNT_TYPE}":"${GCLOUD_MEMBER}" \
    --role=roles/editor \
    --role=roles/compute.admin \
    --role=roles/container.admin \
    --role=roles/resourcemanager.projectIamAdmin \
    --role=roles/iam.serviceAccountAdmin \
    --role=roles/iam.serviceAccountKeyAdmin \
    --role=roles/gkehub.admin
}

required_apis() {
    cat << EOF
container.googleapis.com
compute.googleapis.com
monitoring.googleapis.com
logging.googleapis.com
cloudtrace.googleapis.com
meshca.googleapis.com
meshtelemetry.googleapis.com
meshconfig.googleapis.com
iamcredentials.googleapis.com
gkeconnect.googleapis.com
gkehub.googleapis.com
cloudresourcemanager.googleapis.com
EOF
}

enable_gcloud_apis(){
  info "Enabling required APIs..."
  # shellcheck disable=SC2046
  retry 3 gcloud services enable --project="${PROJECT_ID}" $(required_apis | tr '\n' ' ')
}

get_enabled_apis() {
  local OUTPUT
  OUTPUT="$(retry 3 gcloud services list \
    --enabled \
    --format='get(config.name)' \
    --project="${PROJECT_ID}")"
  echo "${OUTPUT}" | tr '\n' ','
}

exit_if_apis_not_enabled() {
  local ENABLED; ENABLED="$(get_enabled_apis)";
  local NOTFOUND; NOTFOUND="";
  local EXITCODE; EXITCODE=0;

  info "Checking required APIs..."
  while read -r api; do
    EXITCODE=0
    grep -q "${api}" <<EOF || EXITCODE=$?
$ENABLED
EOF
    if [[ "${EXITCODE}" -ne 0 ]]; then
      NOTFOUND="${api},${NOTFOUND}"
    fi
  done <<EOF
$(required_apis)
EOF

  if [[ -n "${NOTFOUND}" ]]; then
    NOTFOUND=${NOTFOUND::-1}
    for api in $(echo "${NOTFOUND}" | tr ' ' '\n'); do
      warn "API not enabled - ${api}"
    done
    { read -r -d '' MSG; fatal "${MSG}"; } <<EOF
One or more APIs are not enabled. Please enable them and retry, or
re-run the script with the '--enable_apis' flag to allow the script to enable
them on your behalf.
EOF
  fi
}

init_meshca() {
  info "Initializing Mesh CA..."
  local TOKEN; TOKEN="$(retry 2 gcloud --project="${PROJECT_ID}" auth print-access-token)"
  run curl --request POST --fail \
    --data '' \
    "https://meshconfig.googleapis.com/v1alpha1/projects/${PROJECT_ID}:initialize" \
    --header @- <<EOF
Authorization: Bearer ${TOKEN}
EOF
}

### Cluster functions ###
set_up_cluster(){
  add_cluster_labels
  enable_workload_identity
  enable_stackdriver_kubernetes
  bind_user_to_cluster_admin
  ensure_istio_namespace_exists
}

add_cluster_labels(){
  info "Reading labels for ${CLUSTER_LOCATION}/${CLUSTER_NAME}..."
  local LABELS;
  LABELS="$(retry 2 gcloud container clusters describe "${CLUSTER_NAME}" \
    --zone="${CLUSTER_LOCATION}" \
    --project="${PROJECT_ID}" \
    --format="value(resourceLabels)")";
  local INSTALLER_LABEL; INSTALLER_LABEL="asmv=${RELEASE//\./-}"
  local MESH_LABEL; MESH_LABEL="mesh_id=proj-${PROJECT_NUMBER}"
  if [ "${LABELS}" ]; then
    LABELS="${LABELS},"
  fi
  info "Adding labels to ${CLUSTER_LOCATION}/${CLUSTER_NAME}..."
  LABELS="${LABELS}${INSTALLER_LABEL},${MESH_LABEL}"
  retry 2 run gcloud container clusters update "${CLUSTER_NAME}" \
    --project="${PROJECT_ID}" \
    --zone="${CLUSTER_LOCATION}" \
    --update-labels="${LABELS}"
}

enable_workload_identity(){
  info "Enabling Workload Identity on ${CLUSTER_LOCATION}/${CLUSTER_NAME}..."
  retry 2 run gcloud container clusters update "${CLUSTER_NAME}" \
    --project="${PROJECT_ID}" \
    --zone="${CLUSTER_LOCATION}" \
    --workload-pool="${WORKLOAD_POOL}"
}

enable_stackdriver_kubernetes(){
  info "Enabling Stackdriver on ${CLUSTER_LOCATION}/${CLUSTER_NAME}..."
  retry 2 run gcloud container clusters update "${CLUSTER_NAME}" \
    --project="${PROJECT_ID}" \
    --zone="${CLUSTER_LOCATION}" \
    --enable-stackdriver-kubernetes
}

bind_user_to_cluster_admin(){
  info "Querying for core/account..."
  local GCLOUD_USER; GCLOUD_USER="$(gcloud config get-value core/account)"
  info "Binding ${GCLOUD_USER} to cluster admin role..."
  local YAML; YAML="$(retry 5 kubectl create \
    clusterrolebinding cluster-admin-binding \
    --clusterrole=cluster-admin \
    --user="${GCLOUD_USER}" \
    --dry-run -o yaml)"
  retry 3 run kubectl apply -f - <<EOF
${YAML}
EOF
}

ensure_istio_namespace_exists(){
  info "Checking for istio-system namespace..."
  if [ "$(retry 2 kubectl get ns | grep -c istio-system || true)" -eq 0 ]; then
    info "Creating istio-system namespace..."
    retry 2 run kubectl create ns istio-system
  fi
}

### Installation functions ###
install_asm(){
  OPERATOR_MANIFEST="asm/cluster/istio-operator.yaml"
  readonly OPERATOR_MANIFEST

  local CA_OPT
  CA_OPT=""
  if [[ "${CA}" = "citadel" ]]; then
    CA_OPT="-citadel"
  fi
  info "Downloading ASM kpt package..."
  retry 3 run kpt pkg get "${KPT_URL}" asm

  # temporary workaround for citadel
  if [[ "${CA}" = "citadel" ]]; then
    run sed -i \
      's/istiod.istio-system.svc:15012/istiod-'"${REVISION_LABEL}"'.istio-system.svc:15012/g' \
      "${OPERATOR_MANIFEST}"
  fi

  info "Configuring kpt package..."
  run kpt cfg set asm gcloud.container.cluster "${CLUSTER_NAME}"
  run kpt cfg set asm gcloud.core.project "${PROJECT_ID}"
  run kpt cfg set asm gcloud.project.environProjectNumber "${PROJECT_NUMBER}"
  run kpt cfg set asm gcloud.compute.location "${CLUSTER_LOCATION}"

  local PARAMS
  PARAMS="-f ${OPERATOR_MANIFEST}"
  if [[ "$OPERATOR_OVERLAY" ]]; then
    PARAMS="${PARAMS} -f ${OPERATOR_OVERLAY}"
  fi
  PARAMS="${PARAMS} --set revision=${REVISION_LABEL}"
  PARAMS="${PARAMS} -c ${KUBECONFIG}"

  info "Installing ASM control plane..."
  # shellcheck disable=SC2086
  retry 5 run ./istio-"${RELEASE}"/bin/istioctl install $PARAMS

  # Prevent the stderr buffer from ^ messing up the terminal output below
  sleep 1
  info "...done!"

  outro
}

outro() {
  info ""
  info "*****************************"
  info "The ASM control plane installation is now complete."

  if [[ "${MODE}" = "migrate" ]]; then
    info "Please verify the new control plane and then: 1) migrate your workloads 2) remove old control plane."
    info "For more information, see:"
    info "https://cloud.google.com/service-mesh/docs/upgrading-gke#redeploying_workloads"
  elif [[ "${MODE}" = "install" ]]; then
    info "To finish the installation, enable Istio sidecar injection and restart your workloads."
    info "For more information, see:"
    info "https://cloud.google.com/service-mesh/docs/proxy-injection"
  fi

  info "*****************************"
}

main "${@}"
