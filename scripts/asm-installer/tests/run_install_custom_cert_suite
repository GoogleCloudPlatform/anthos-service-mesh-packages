#!/bin/bash
set -CeEu
set -o pipefail

SPATH="$(readlink -f "$0")"
SDIR="$(dirname "${SPATH}")"; export SDIR;

# shellcheck source=common.sh
. "${SDIR}/common.sh"

cd "${SDIR}"

main() {
  # CLI setup
  parse_args "$@"

  # Cluster setup
  if [[ -n "${SERVICE_ACCOUNT}" ]]; then
    echo "Authorizing service acount..."
    auth_service_account
  fi

  local CLUSTER_NAME; CLUSTER_NAME="ephem-custom-cert-suite-${BUILD_ID::8}";
  local NAMESPACE; NAMESPACE="namespace-${BUILD_ID}"
  echo "Creating cluster ${CLUSTER_NAME}..."
  create_working_cluster "${PROJECT_ID}" "${CLUSTER_NAME}" "${CLUSTER_LOCATION}"
  # this trap isn't tested for all circumstances so caveat emptor
  trap 'cleanup "${PROJECT_ID}" "${CLUSTER_NAME}" "${CLUSTER_LOCATION}" "${NAMESPACE}"; exit 1;' ERR

  # Demo app setup
  echo "Installing and verifying demo app..."
  install_demo_app "${NAMESPACE}"

  local GATEWAY; GATEWAY="$(kube_ingress "${NAMESPACE}")";
  verify_demo_app "$GATEWAY"


  echo "Generating certificates..."
  TMP_DIR="$(mktemp -d)"
  if [[ -z "${TMP_DIR}" ]]; then
    fatal "Encountered error when running mktemp -d!"
  fi
  pushd "${TMP_DIR}"

  curl -LO -H "Accept: application/vnd.github.v3.raw" \
    https://api.github.com/repos/istio/istio/contents/tools/certs/common.mk
  curl -LO -H "Accept: application/vnd.github.v3.raw" \
    https://api.github.com/repos/istio/istio/contents/tools/certs/Makefile.selfsigned.mk

  make -f Makefile.selfsigned.mk root-ca
  make -f Makefile.selfsigned.mk "${CLUSTER_NAME}"-cacerts

  TEST_ROOT="$(readlink -f root-cert.pem)"
  TEST_CHAIN="$(readlink -f "${CLUSTER_NAME}"/cert-chain.pem)"
  TEST_CERT="$(readlink -f "${CLUSTER_NAME}"/ca-cert.pem)"
  TEST_KEY="$(readlink -f "${CLUSTER_NAME}"/ca-key.pem)"

  popd

  # Test starts here
  echo "Installing ASM with custom cert Citadel..."
  if [[ -n "${SERVICE_ACCOUNT}" ]]; then
    echo "../install_asm \
      -l ${CLUSTER_LOCATION} \
      -n ${CLUSTER_NAME} \
      -p ${PROJECT_ID} \
      -m install \
      -c citadel \
      --ca-cert ${TEST_CERT} \
      --ca-key ${TEST_KEY} \
      --root-cert ${TEST_ROOT} \
      --cert-chain ${TEST_CHAIN} \
      -s ${SERVICE_ACCOUNT} \
      -k ${KEY_FILE} -v -e"
    ../install_asm \
      -l "${CLUSTER_LOCATION}" \
      -n "${CLUSTER_NAME}" \
      -p "${PROJECT_ID}" \
      -m install \
      -c citadel \
      --ca-cert ${TEST_CERT} \
      --ca-key ${TEST_KEY} \
      --root-cert ${TEST_ROOT} \
      --cert-chain ${TEST_CHAIN} \
      -s "${SERVICE_ACCOUNT}" \
      -k "${KEY_FILE}" -v -e
  else
    echo "../install_asm \
      -l ${CLUSTER_LOCATION} \
      -n ${CLUSTER_NAME} \
      -p ${PROJECT_ID} \
      -m install \
      --ca-cert ${TEST_CERT} \
      --ca-key ${TEST_KEY} \
      --root-cert ${TEST_ROOT} \
      --cert-chain ${TEST_CHAIN} \
      -c citadel -v -e"
    ../install_asm \
      -l "${CLUSTER_LOCATION}" \
      -n "${CLUSTER_NAME}" \
      -p "${PROJECT_ID}" \
      -m install \
      --ca-cert ${TEST_CERT} \
      --ca-key ${TEST_KEY} \
      --root-cert ${TEST_ROOT} \
      --cert-chain ${TEST_CHAIN} \
      -c citadel -v -e
  fi

  sleep 5
  echo "Installing Istio manifests for demo app..."
  install_demo_app_istio_manifests "${NAMESPACE}"
  REVISION_LABEL="$(kubectl get pod -n istio-system -l app=istiod \
      -o jsonpath='{.items[0].metadata.labels.istio\.io/rev}')"

  kubectl label namespace "${NAMESPACE}" istio-injection- \
    istio.io/rev="${REVISION_LABEL}" --overwrite || true

  install_strict_policy "${NAMESPACE}"

  echo "Performing a rolling restart of the demo app..."
  roll "${NAMESPACE}"

  echo "Sleeping 20 to ensure security policy is applied..."
  sleep 20

  # https://istio.io/latest/docs/tasks/security/cert-management/plugin-ca-cert/#verifying-the-certificates
  echo "Getting current certs from running pods..."

  # grab an arbitrary pod
  CHECK_FROM="$(kubectl get pods -n "${NAMESPACE}" \
    | grep currencyservice \
    | awk '{ print $1 }')"

  # grab an arbitrary but different IP:PORT
  CHECK_TO="$(kubectl get service -n "${NAMESPACE}" \
    | grep cartservice \
    | awk '{ split($5, a, "/"); print $3 ":" a[1] }')"

  pushd "${TMP_DIR}"
  # openssl can give some weird return values sometimes
  set +e
  set +o pipefail
  # use openssl from A to B to get the cert chain and split them into files
  # seems like 3 is the root cert, 2 is the ca cert, 4 is the chain
  kubectl exec -n "${NAMESPACE}" "${CHECK_FROM}" -c istio-proxy -- \
    openssl s_client -showcerts -connect "${CHECK_TO}" \
    | sed -n '/-----BEGIN CERTIFICATE-----/{:start /-----END CERTIFICATE-----/!{N;b start};/.*/p}' \
    | awk 'BEGIN {counter=0;} /BEGIN CERT/{counter++} { print > "cert-" counter ".pem"}'

  echo "Checking certificates..."

  WANT_HASH="$(openssl x509 -in "${TEST_ROOT}" -modulus -noout)"
  GOT_HASH="$(openssl x509 -in cert-3.pem -modulus -noout)"
  warn "Root certificate:"
  warn "Got: ${GOT_HASH}"
  warn "Wanted: ${WANT_HASH}"
  if [[ "${WANT_HASH}" != "${GOT_HASH}" ]]; then
    fatal "Generated root certificate differs from the one from sidecar!"
  fi

  WANT_HASH="$(openssl x509 -in "${TEST_CERT}" -modulus -noout)"
  GOT_HASH="$(openssl x509 -in cert-2.pem -modulus -noout)"
  warn "CA certificate:"
  warn "Got: ${GOT_HASH}"
  warn "Wanted: ${WANT_HASH}"
  if [[ "${WANT_HASH}" != "${GOT_HASH}" ]]; then
    fatal "Generated CA certificate differs from the one from sidecar!"
  fi

  if ! openssl verify -trusted "${TEST_ROOT}" cert-4.pem; then
    fatal "Couldn't verify the cert chain using generated root cert!"
  fi

  echo "Success!"


  # Cluster teardown
  echo "Deleting cluster ${CLUSTER_NAME} and associated resources..."
  cleanup "${PROJECT_ID}" "${CLUSTER_NAME}" "${CLUSTER_LOCATION}" "${NAMESPACE}"
}

main "$@"
